describe User do
  describe 'validations' do
    let(:params) { {} }
    subject { FactoryBot.build(:user, params) }

    context 'when all the fields are present' do
      it 'is valid' do
        expect(subject).to be_valid
      end
    end

    context 'when the username is missing' do
      let(:params) { { username: nil } }
      it 'becomes valid with an autogenerated username' do
        expect(subject).to be_valid
        expect(subject.username).to be_present
      end
    end

    context 'when the email is missing' do
      let(:params) { { email: nil } }
      it 'becomes valid with an autogenerated username' do
        expect(subject).to be_valid
        expect(subject.email).to be_present
      end
    end

    context 'when the full_name is missing' do
      let(:params) { { full_name: nil } }
      it 'is not valid' do
        expect(subject).not_to be_valid
      end
    end
  end

  describe '#pending_balance' do
    subject { FactoryBot.create(:student) }

    context 'when the student has no orders' do
      it 'returns 0' do
        expect(subject.pending_balance).to eq 0
      end
    end

    context 'when the student has orders' do
      before do
        FactoryBot.create(:order, student: subject, balance: balance)
      end

      context 'when the orders do not have some balance' do
        let(:balance) { 0 }
        it 'returns 0' do
          expect(subject.pending_balance).to eq 0
        end
      end

      context 'when the orders have some balance' do
        let(:balance) { 500 }

        before do
          FactoryBot.create(:order, student: subject, balance: 1000)
        end

        it 'returns the total of all the pending orders' do
          expect(subject.pending_balance).to eq 1500
        end
      end

    end
  end

  describe '.from_omniauth' do
    let(:auth) do
      OpenStruct.new(
        info: OpenStruct.new(email: email, name: 'Jose Gomez'),
        provider: 'Azure',
        uid: '1234'
      )
    end

    subject { described_class.from_omniauth(auth) }

    context "when the user's email starts with a matricula" do
      let(:email) { '20100724@ce.pucmm.edu.do' }
      it 'sets the role to student' do
        expect(subject.role).to eq 'student'
      end
    end

    context "when the user's email doesn't start with a matricula" do
      let(:email) { 'jose.pena@ce.pucmm.edu.do' }
      it 'sets the role to teacher' do
        expect(subject.role).to eq 'teacher'
      end
    end
  end
end
